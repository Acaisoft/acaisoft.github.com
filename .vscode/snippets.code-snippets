{
  // Place your goldcoin-frontend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Component": {
    "scope": "typescriptreact",
    "prefix": "gen-comp",
    "body": [
      "import React from 'react';",
      "",
      "export interface ${1:${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}}Props {",
      "  ",
      "}",
      "",
      "export const $1: React.FC<$1Props> = () => {",
      "  ",
      "  return <div>$1 works!</div>;",
      "};",
      ""
    ],
    "description": "Create function component"
  },
  "Component with ref": {
    "scope": "typescriptreact",
    "prefix": "gen-comp-ref",
    "body": [
      "import React, { forwardRef } from 'react';",
      "",
      "export interface ${1:${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}}Props {",
      "  ",
      "}",
      "",
      "export const $1 = forwardRef<HTMLDivElement, $1Props>((props, ref) => {",
      "  ",
      "  return <div>$1 works!</div>;",
      "});",
      "",
      "$1.displayName = \"$1\"",
      ""
    ],
    "description": "Create function component"
  },
  "Svg Icon": {
    "scope": "typescriptreact",
    "prefix": "gen-icon",
    "body": [
      "import { forwardRef, SVGProps } from 'react';",
      "",
      "export const ${1:${TM_FILENAME_BASE/^(.)(.*)$/${1:/upcase}${2}/}} = forwardRef<SVGSVGElement, SVGProps<SVGSVGElement>>(",
      "  (props, ref) => <svg ref={ref} {...props}></svg>",
      ");",
      "",
      "$1.displayName = \"$1\";",
      ""
    ]
  }
}
